base:
    subtitle: 'DGEMM-OMP_{{ompnumthreads}}_{{size}}'
    summary: DGEMM problem from the APEX benchmark suite
    doc: |
          ===================================================================
          ACES DGEMM Benchmark
          ===================================================================
          
          The purpose of the DGEMM benchmark is to provide an evaluation
          mechanism for running numerically intensive appplications on
          hardware systems with active thermal throttling and dynamic clock
          frequencies.
          
          The benchmark runs on a single node (i.e. there is no distributed
          MPI) but is threaded.
          
          Source code is contained in the "src" directory.
          
          ===================================================================
          
          Modifications Permitted:
          
          - Vendors are permitted to change the source code in the region
          marked in the source.
          - Optimized BLAS/DGEMM routines are permitted (and encouraged) to
          demonstrated the highest performance.
          - Vendors may modify the Makefile(s) as required
          
          ===================================================================
          
          Running the Benchmark:
          
          Example:
          
          export OMP_NUM_THREADS=32
          export OMP_PLACES=cores
          export OMP_PROC_BIND=close
          
          ./mt-dgemm 5004 100
          
          
          - This runs the benchmark with a matrix input size of 5004 and
          100 repetitions.
          - The vendor is free to select the matrix size but smaller matrices
          will often produce lower performance results
          - ACES will perform run the benchmark with a minimum repetition
          of 500 to ensure consistent processor performance that is unaffected
          by thermal throttling.
          
          ===================================================================
          
          Example Output of Interest:
          
          Final Sum is:         5004.010000
          Memory for Matrices:  573.120483 MB
          Multiply time:        26.925897 seconds
          FLOPs computed:       25065056016000.000000
          GFLOP/s rate:         930.890292 GF/s
          
          - The GFLOP/s rate is the FOM of interest for this benchmark
          - The *entire* output should be provided by the Offeror
          
          ===================================================================
          
    maintainer:
        name: Paul Ferrell
        email: pferrell@lanl.gov
    scheduler: slurm
    schedule:
        nodes: 32
        tasks_per_node: 32
    variables:
        size: [ 5004 ]
        iterations: [ 500 ]
        #size: [ 2500, 5000, 10000, 20000, 40000 ] #12665
        mpis:
            - { name: "cray-mpich", version: "7.7.20", mpicc: "cc", mpicxx: "CC", mpifc: "ftn" }
        compilers:
            - { name: "intel-classic", version: "2022.0.2", pe_env: "PrgEnv-intel", cc: "cc", cxx: "CC", fc: "ftn", build_opts: '-DUSE_CBLAS=1 -O3 -qopenmp'}
            - { name: "intel", version: "2022.0.2", pe_env: "PrgEnv-intel", cc: "cc", cxx: "CC", fc: "ftn", build_opts: '-DUSE_CBLAS=1 -O3 -qopenmp'}
            - { name: "intel-oneapi", version: "2022.0.2", pe_env: "PrgEnv-intel", cc: "cc", cxx: "CC", fc: "ftn", build_opts: '-DUSE_CBLAS=1 -O3 -qopenmp'}
            - { name: "gcc", version: "11.2.0", pe_env: "PrgEnv-gnu", cc: "cc", cxx: "CC", fc: "ftn", build_opts: '-DUSE_CBLAS=1 -O3 -fopenmp'}
            - { name: "cce", version: "14,0.0", pe_env: "PrgEnv-cray", cc: "cc", cxx: "CC", fc: "ftn", build_opts: '-DUSE_CBLAS=1 -O3 -hopenmp'}
        ompnumthreads: 
            - '32'

    permute_on: [ompnumthreads, size]
    build:
        env:
            CC: '{{compilers.cc}}'
        source_url: http://portal.nersc.gov/project/m888/apex/mt-dgemm_160114.tgz
        source_path: mt-dgemm
        preamble:
            - 'test_mod () {'
            - '  mod=$1'
            - '  module -t list 2>&1 | grep $mod &>/dev/null || exit 1'
            - '}'
            - 'module load friendly-testing'
            - 'module swap PrgEnv-${PE_ENV,,} {{compilers.pe_env}}'
            - 'test_mod {{compilers.pe_env}}'
            - 'comp_name={{compilers.name}}'
            - 'module unload ${comp_name} || module unload ${comp_name//-*}'
            - 'module load {{compilers.name}}/{{compilers.version}}'
            - 'test_mod {{compilers.name}}/{{compilers.version}}'
            - 'module swap {{mpis.name}}/{{mpis.version}}'
            - 'test_mod {{mpis.name}}/{{mpis.version}}'
            - 'module -t list'

        modules:
            - 'cray-libsci'
        cmds:
            - 'cd src'
            - "# Patch broken openmp pragmas"
            - patch -p1 < ../dgemm_omp_fixes.patch
            - '${CC} -o mt-dgemm {{compilers.build_opts}} mt-dgemm.c'

    run:
        timeout: 6000
        preamble:
            - 'test_mod () {'
            - '  mod=$1'
            - '  module -t list 2>&1 | grep $mod &>/dev/null || exit 1'
            - '}'
            - 'module load friendly-testing'
            - 'module swap PrgEnv-${PE_ENV,,} {{compilers.pe_env}}'
            - 'test_mod {{compilers.pe_env}}'
            - 'comp_name={{compilers.name}}'
            - 'module unload ${comp_name} || module unload ${comp_name//-*}'
            - 'module load {{compilers.name}}/{{compilers.version}}'
            - 'test_mod {{compilers.name}}/{{compilers.version}}'
            - 'module swap {{mpis.name}}/{{mpis.version}}'
            - 'test_mod {{mpis.name}}/{{mpis.version}}'
            - 'module -t list'
        modules:
            - 'cray-libsci'

        env:
            OMP_NUM_THREADS: '{{ompnumthreads}}'
            OMP_PROC_BIND: 'close'
            OMP_PLACES: 'cores'
            OMP_DISPLAY_ENV: 'true'
        cmds: 
            - for node in {{ sched.test_node_list }}; do
            -   if [[ $node == $SLURMD_NODENAME ]]; then
            -        continue
            -   fi    
            -   srun -w $node -N1 -n1 ./mt-dgemm {{size}} &> ${node}.out &
            -   sleep 0.5
            - done
            - while [[ $(jobs | wc -l) != 0 ]]; do 
            -   jobs
            -   sleep 1
            -   echo -n "."
            - done
            - ./src/mt-dgemm {{size}} {{iterations}} &> ${SLURMD_NODENAME}.out

    result_parse:
#===============================================================
#Final Sum is:         12665.033333
# -> Solution check PASSED successfully.
#Memory for Matrices:  3671.315575 MB
#Multiply time:        31.769945 seconds
#FLOPs computed:       121899274911000.000000
#GFLOP/s rate:         3836.936920 GF/s
#===============================================================
        constant:
            size:
                const: "{{size}}"
            omp_num_threads:
                const: "{{ompnumthreads}}"
        regex:
            result: 
                regex: 'Solution check PASSED successfully'
                per_file: all
                files: '*.out'
                action: store_true
            memory:
                regex: '^Memory for Matrices:\s+(.*)\s+MB'
                per_file: name
                files: '*.out'
            gflops:
                regex: '^GFLOP\/s\s+rate:\s+(.*)\s+GF\/s'
                per_file: name
                files: '*.out'
           
    result_evaluate:
        gflops_avg: avg(per_file.*.gflops)
        gflops_outliers: outliers(per_file.*.gflops, keys(per_file), 2)


